# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  OPENVINO_VERSION: 2021.4.2
  VERSION: 2021.4.2.3
  DIST_VERSION: 2021.4.752
  DIST_WIN: https://registrationcenter-download.intel.com/akdlm/irc_nas/18320/w_openvino_toolkit_p_2021.4.752.exe
  DIST_MAC: https://registrationcenter-download.intel.com/akdlm/irc_nas/18317/m_openvino_toolkit_p_2021.4.752.dmg

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_lnx:
    runs-on: ubuntu-18.04
    container:
      centos:centos7.6.1810

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        yum install -y python3 wget
        yum group install -y "Development Tools"
        python3 -m pip install --upgrade pip
        wget -q https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2-linux-x86_64.tar.gz
        tar -xf cmake-3.20.2-linux-x86_64.tar.gz

    - name: Install OpenVINO
      run: |
        yum install -y yum-utils
        yum-config-manager --add-repo https://yum.repos.intel.com/openvino/2021/setup/intel-openvino-2021.repo
        rpm --import https://yum.repos.intel.com/openvino/2021/setup/RPM-GPG-KEY-INTEL-OPENVINO-2021
        yum install -y intel-openvino-runtime-centos7-${{env.DIST_VERSION}}.x86_64

    - name: Build CPU extensions
      run: |
        source /opt/intel/openvino_2021/bin/setupvars.sh
        cd user_ie_extensions
        mkdir build && cd build
        ../../cmake-3.20.2-linux-x86_64/bin/cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc --all)

    - name: Build wheel
      run: |
        python3 -m pip install wheel
        EXT_LIB=user_ie_extensions/build/libuser_cpu_extension.so python3 setup.py build bdist_wheel
        mv dist/*.whl openvino_extensions-${{env.VERSION}}-py3-none-manylinux2014_x86_64.whl

    - uses: actions/upload-artifact@v2
      with:
        name: "wheel_lnx"
        path: "*.whl"

  build_win:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install OpenVINO
      run: |
        curl ${{env.DIST_WIN}} -o openvino.exe
        start /WAIT openvino.exe --s --a install --eula=accept --output=log.txt
      shell: cmd

    - name: Build CPU extensions
      run: |
        call "C:\Program Files (x86)\Intel\openvino_2021\bin\setupvars.bat"
        cd user_ie_extensions
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release -j 2
      shell: cmd

    - name: Build wheel
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install wheel
        ls user_ie_extensions\build\Release
        set EXT_LIB=user_ie_extensions\\build\\Release\\user_cpu_extension.dll
        python3 setup.py build bdist_wheel
        move dist\\*.whl openvino_extensions-${{env.VERSION}}-py3-none-win_amd64.whl
      shell: cmd

    - uses: actions/upload-artifact@v2
      with:
        name: "wheel_win"
        path: "*.whl"

  build_mac:
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2

    - name: Install OpenVINO
      run: |
        curl ${{env.DIST_MAC}} -o openvino.dmg
        hdiutil attach openvino.dmg
        cd /Volumes/m_openvino_toolkit_p_${{env.DIST_VERSION}}/m_openvino_toolkit_p_${{env.DIST_VERSION}}.app/Contents/MacOS/
        sudo ./install.sh -s silent.cfg --accept_eula

    - name: Build CPU extensions
      run: |
        source /opt/intel/openvino_2021/bin/setupvars.sh
        cd user_ie_extensions
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc --all)

    - name: Build wheel
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install wheel
        ls user_ie_extensions/build/
        EXT_LIB=user_ie_extensions/build/libuser_cpu_extension.dylib python3 setup.py build bdist_wheel
        mv dist/*.whl openvino_extensions-${{env.VERSION}}-py3-none-macosx_10_15_x86_64.whl

    - uses: actions/upload-artifact@v2
      with:
        name: "wheel_mac"
        path: "*.whl"

  test_lnx:
    needs: build_lnx
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
          name: wheel_lnx

    - name: Install dependencies
      run: |
        sudo apt-get install -y python3-setuptools libopencv-dev
        python3 -m pip install --upgrade pip
        python3 -m pip install -r tests/requirements.txt
        python3 -m pip install -U protobuf
        python3 -m pip install openvino-dev[onnx]==${{env.OPENVINO_VERSION}}

    # Also, remove "openvino_extensions" folder to avoid import confusion
    - name: Install CPU extensions
      run: |
        rm -r openvino_extensions
        python3 -m pip install *.whl

    - name: Test
      run: |
        python3 -m pytest tests/run_tests.py

  publish:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: [test_lnx, build_win, build_mac]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/download-artifact@v2

      - name: Publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install twine
          python3 -m twine upload wheel*/*.whl --skip-existing
